import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

load_dotenv()
TOKEN = os.getenv('TG_BOT_TOKEN')
WEBHOOK = os.getenv('TG_WEBHOOK')
CHAT_ID = os.getenv('TG_CHAT_ID')
HOST = os.getenv('HOST')
PORT = int(os.environ.get('PORT', 80))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Global dictionary to store user locations
user_locations = {}

async def start(message: types.Message) -> None:
    user = message.from_user
    await message.reply(fr"–ü—Ä–∏–≤–µ—Ç, {user.mention}! –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∏ —Ç–∞–∫—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–∑ –º–µ–Ω—é üìé.")
# Create a set to store user IDs who have already pressed the button
users_pressed_button = {}

async def handle_location(message: types.Message) -> None:
    user = message.from_user
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude

        users_pressed_button[user.id] = 0
            
        # Save the location in the global dictionary using user_id as the key
        user_locations[user.id] = {'latitude': latitude, 'longitude': longitude}
        
        keyboard_free = InlineKeyboardMarkup().add(InlineKeyboardButton("–°–≤–æ–±–æ–¥–µ–Ω", callback_data="free"))


        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention}! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–°–≤–æ–±–æ–¥–µ–Ω] –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –ì–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π. \n\n –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–º–µ—Ç–∫—Éüìç –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–æ–º. \n –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! üöïüåü",
            reply_markup=keyboard_free,
        )
    else:
        await message.reply(f"–ü—Ä–æ—Å—Ç–∏—Ç–µ, {user.mention}, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ @ramal_softdev –¥–ª—è –ø–æ–º–æ—â–∏. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞—à—É —É—Å–ª—É–≥—É —Ç–∞–∫—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. \n –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üöïüåüüòä")

async def free_btn(query: types.CallbackQuery) -> None:
    await query.answer()
    user = query.from_user

    users_pressed_button[user.id] += 1

    # Check if the user has already pressed the button
    if users_pressed_button[user.id] > 1:
        await query.message.reply("–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É [–°–≤–æ–±–æ–¥–µ–Ω]. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç–∫—Éüìç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.")
        return

    # Get the user's location from the global dictionary using user_id as the key
    location = user_locations.get(user.id)

    if location:
        latitude = location['latitude']
        longitude = location['longitude']

        await bot.send_message(
            chat_id=CHAT_ID,
            text=f"–ü—Ä–∏–≤–µ—Çüëã! –Ø –≤–∞—à —Ç–∞–∫—Å–∏—Å—Ç {user.mention}, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–æ–π üöïüåü.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–∑ –º–µ–Ω—é üìé, –∏ —è –ø—Ä–∏–µ–¥—É –∫ –≤–∞–º! –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞–º –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –ø–æ –≥–æ—Ä–æ–¥—É.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–∞, –∏ –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!üòä",
        )

        # Send the location map to the group
        await bot.send_location(chat_id=CHAT_ID, latitude=latitude, longitude=longitude)

        await query.message.reply(f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n–ú—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É {CHAT_ID}. –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–º–µ—Ç–∫—Éüìç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
    else:
        await query.message.reply(f"–ü—Ä–æ—Å—Ç–∏—Ç–µ, {user.mention}, –Ω–æ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ @ramal_softdev –¥–ª—è –ø–æ–º–æ—â–∏.\n–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! üöïüåüüòä")

async def on_startup(dp):
    # Set up webhook
    await bot.delete_webhook()
    await bot.set_webhook(url=WEBHOOK)  # Replace with your Heroku app URL


def main():
    # Add handler for the start command
    dp.register_message_handler(start, commands=["start"])

    # Add handler for the location message
    dp.register_message_handler(handle_location, content_types=types.ContentTypes.LOCATION)

    # Add handler for the "–°–≤–æ–±–æ–¥–µ–Ω" button
    dp.register_callback_query_handler(free_btn, text="free")

    # Start the webhook
    executor.start_webhook(
        dispatcher=dp,
        webhook_path="/",
        on_startup=on_startup,
        skip_updates=True,
        host=HOST,
        port=PORT,
    )

if __name__ == "__main__":
    main()
