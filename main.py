import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from GroupNotifier import GroupMessageSender

load_dotenv()
TOKEN = os.getenv('TG_BOT_TOKEN')
WEBHOOK = os.getenv('TG_WEBHOOK')
CHAT_ID = os.getenv('TG_CHAT_ID')
HOST = os.getenv('HOST')
PORT = int(os.environ.get('PORT', 80))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Global dictionary to store user locations
user_locations = {}

async def start(message: types.Message) -> None:
    user = message.from_user
    await message.reply(fr"–ü—Ä–∏–≤–µ—Ç, {user.mention}! –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∏ —Ç–∞–∫—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–∑ –º–µ–Ω—é üìé.")
    
# Create a map to store user IDs who have already pressed the button
users_pressed_button = set()
users_pressed_confirmation_button = set()

async def handle_location(message: types.Message) -> None:
    user = message.from_user
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude

        if user.id in users_pressed_button:
            users_pressed_button.remove(user.id)
        if user.id in users_pressed_confirmation_button:
            users_pressed_confirmation_button.remove(user.id)
            
        # Save the location in the global dictionary using user_id as the key
        user_locations[user.id] = {'latitude': latitude, 'longitude': longitude}
        
        keyboard_free = InlineKeyboardMarkup().add(InlineKeyboardButton("–°–≤–æ–±–æ–¥–µ–Ω", callback_data="free"))


        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention}! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–°–≤–æ–±–æ–¥–µ–Ω] –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –ì–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π. \n\n –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É üìç–≥–µ–æ–º–µ—Ç–∫—É –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º —Ç–∞–∫—Å–∏-—Å–µ—Ä–≤–∏—Å–æ–º. \n –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! üöïüåü",
            reply_markup=keyboard_free,
        )
    else:
        await message.reply(f"–ü—Ä–æ—Å—Ç–∏—Ç–µ, {user.mention}, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ @ramal_softdev –¥–ª—è –ø–æ–º–æ—â–∏. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞—à—É —É—Å–ª—É–≥—É —Ç–∞–∫—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. \n –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üöïüåüüòä")


async def confirm_free_btn(query: types.CallbackQuery) -> bool:
    await query.answer()
    # Create a queue to pass the user's confirmation choice
    confirmation_queue = asyncio.Queue()

    # Create an InlineKeyboardMarkup with "–î–∞" (Yes) and "–ù–µ—Ç" (No) buttons
    confirm_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞", callback_data="confirm_yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_no")
    )

    await query.message.reply(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=confirm_keyboard
    )

    # Define the handler for the user's choice
    async def handle_confirm(confirmation_query: types.CallbackQuery):
        await confirmation_query.answer()
        if confirmation_query.data == "confirm_yes":
            await confirmation_queue.put(True)
        elif confirmation_query.data == "confirm_no":
            await confirmation_queue.put(False)

    # Register the handler for the user's choice
    dp.register_callback_query_handler(handle_confirm, lambda q: q.message.message_id == query.message.message_id)

    # Wait until the user makes a choice
    confirmed = await confirmation_queue.get()

    # Unregister the handler after it has been triggered
    dp.unregister_callback_query_handler(handle_confirm)

    # Return the user's choice (True for "–î–∞" and False for "–ù–µ—Ç")
    return confirmed

async def handle_confirm_yes(query: types.CallbackQuery) -> None:
    await query.answer()
    user = query.from_user
    # Get the user's location from the global dictionary using user_id as the key
    location = user_locations.get(user.id)

    message_sender = GroupMessageSender(bot)
    await message_sender.send_message_to_group(CHAT_ID, location, user)
async def handle_confirm_no(query: types.CallbackQuery) -> None:
    await query.message.reply("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–π üìç–≥–µ–æ–º–µ—Ç–∫–∏ –≤ –≥—Ä—É–ø–ø—É. –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é.")

    
async def free_btn(query: types.CallbackQuery) -> None:
    try:
        await query.answer()
        user = query.from_user
        
        # Check if the user not have @username and haven't received the reminder message yet
        if user.username is None:
            await query.message.reply("–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚ö†Ô∏è\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å \"–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\" (—Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞–∫ \"username\") –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n–ë–µ–∑ \"–∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\" –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.\n–î–æ–±–∞–≤—å—Ç–µ \"–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\" –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè")
            return

        # Check if the user has already pressed the button
        if user.id in users_pressed_button:
            await query.message.reply("–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É [–°–≤–æ–±–æ–¥–µ–Ω]. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å üìç–≥–µ–æ–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.")
            return
        
        users_pressed_button.add(user.id)
        
         # Create an InlineKeyboardMarkup with "–î–∞" (Yes) and "–ù–µ—Ç" (No) buttons
        confirm_keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_no")
        )

        await query.message.reply(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=confirm_keyboard
        )
    except Exception as e:
        # Log the error or handle it appropriately
        print(f"Error handling callback query in free_btn: {e}")



async def on_startup(dp):
    # Set up webhook
    await bot.delete_webhook()
    await bot.set_webhook(url=WEBHOOK)  # Replace with your Heroku app URL


def main():
    # Add handler for the start command
    dp.register_message_handler(start, commands=["start"])

    # Add handler for the location message
    dp.register_message_handler(handle_location, content_types=types.ContentTypes.LOCATION)

    # Add handler for the "–°–≤–æ–±–æ–¥–µ–Ω" button
    dp.register_callback_query_handler(free_btn, text="free")

    # Add handler for the "–î–∞" (Yes) and "–ù–µ—Ç" (No) buttons from the confirmation model window
    dp.register_callback_query_handler(handle_confirm_yes, text="confirm_yes")
    dp.register_callback_query_handler(handle_confirm_no, text="confirm_no")


    # test localhost
    # executor.start_polling(dispatcher=dp, skip_updates=True)
    # Start the webhook
    executor.start_webhook(
        dispatcher=dp,
        webhook_path="/",
        on_startup=on_startup,
        skip_updates=True,
        host=HOST,
        port=PORT,
    )

if __name__ == "__main__":
    main()
